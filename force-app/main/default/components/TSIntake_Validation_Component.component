<apex:component >
  <script type="text/javascript">
            var $jx = jQuery.noConflict();
            $jx('[id$=tSIntakeForm]').validate();
            errorclass: "myerrorclass";
            
            $jx('[id$=gender_identi]').rules("add", {
              required: true,
              messages: {
                  required: "<br/>Required field",
              }
            });
            $jx('[id$=ethnicity]').rules("add", {
              required: true,
              messages: {
                  required: "<br/>Required field",
              }
            });
            
            $jx('[id$=Talentschools]').rules("add", {
              required: true,
              messages: {
                  required: "<br/>Required field",
              }
            });
            
            $jx('[id$=uscitizen]').rules("add", {
              required: true,
              messages: {
                  required: "<br/>Required field",
              }
            });
            
            $jx('[id$=currentgrade]').rules("add", {
              required: true,
              messages: {
                  required: "<br/>Required field",
              }
            });
            
            $jx('[id$=taxableincome]').rules("add", {
              required: true,
              messages: {
                  required: "<br/>Required field",
              }
            });
            
            $jx('[id$=householdsize]').rules("add",{
              required: true,
              maxlength: 2,
              number: true,  
              messages:{
                required:"<br/>Required field",
                maxlength: jQuery.validator.format("<br/>Allow only 2 digits"),
                number: jQuery.validator.format("<br/>Please enter a valid number"),
             }                           
            });
            
            $jx('[id$=street]').rules("add", {
              required: false,
              maxlength: 255,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 255 digits"),
              }
            });
            
            $jx('[id$=city]').rules("add", {
              required: false,
              maxlength: 40,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 40 digits"),
              }
            });
            
            $jx('[id$=state]').rules("add", {
              required: false,
              maxlength: 80,
              messages: {
                  maxlength: jQuery.validator.format("<br/>Allow only 80 characters"),
              }
            });
            
            $jx('[id$=country]').rules("add", {
              required: false,
              maxlength: 80,
              messages: {
                  maxlength: jQuery.validator.format("<br/>Allow only 80 characters"),
              }
            });
            $jx('[id$=homePhone]').rules("add", {
              required: false,
              phoneUS: true,
              messages: {
                  required: "<br/>Required field",
                  phoneUS: jQuery.validator.format("<br/>Please enter a valid format (nnn) nnn-nnnn"),
            
              }
            });
            
            $jx('[id$=otherPhone]').rules("add", {
              required: false,
              phoneUS: true,
              messages: {
                  required: "<br/>Required field",
                  phoneUS: jQuery.validator.format("<br/>Please enter a valid format (nnn) nnn-nnnn"),
            
              }
            });
            
            $jx('[id$=mobilePhonets]').rules("add", {
              required: false,
              phoneUS: true,
              messages: {
                  required: "<br/>Required field",
                  phoneUS: jQuery.validator.format("<br/>Please enter a valid format (nnn) nnn-nnnn"),
              }
            });
            
            $jx('[id$=Otherskul]').rules("add", {
              required: true,
              maxlength: 255,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 255 characters"),
              }
            });
            $jx('[id$=permanentResidentId]').rules("add", {
              required: false,
              maxlength: 9,
              messages: {
                  maxlength: jQuery.validator.format("<br/>Allow only 9 characters"),
              }
            });
            
            $jx('[id$=otherLearnedAboutProgram]').rules("add", {
              required: false,
              maxlength: 100,
              messages: {
                  maxlength: jQuery.validator.format("<br/>Allow only 100 characters"),
              }
            });
            $jx('[id$=motherGuardian1FirstName]').rules("add", {
              required: false,
              maxlength: 25,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 25 characters"),
              }
            });
            $jx('[id$=motherGuardian1LastName]').rules("add", {
              required: false,
              maxlength: 25,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 25 characters"),
              }
            });
            $jx('[id$=fatherGuardian2FirstName]').rules("add", {
              required: false,
              maxlength: 25,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 25 characters"),
              }
            });
            $jx('[id$=fatherGuardian2LastName]').rules("add", {
              required: false,
              maxlength: 25,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 25 characters"),
              }
            });
            $jx('[id$=fatherGuardian2LastName]').rules("add", {
              required: false,
              maxlength: 25,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 25 characters"),
              }
            });
            $jx('[id$=mothercollg]').rules("add", {
              required: false,
              maxlength: 255,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 255 characters"),
              }
            });
            $jx('[id$=fatherCollg]').rules("add", {
              required: false,
              maxlength: 255,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 255 characters"),
              }
            });
            $jx('[id$=otherPrograms]').rules("add", {
              required: false,
              maxlength: 255,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 255 characters"),
              }
            });
            $jx('[id$=tutorialTopic]').rules("add", {
              required: false,
              maxlength: 100,
              messages: {
                  required: "<br/>Required field",
                  maxlength: jQuery.validator.format("<br/>Allow only 100 characters"),
              }
            });
            
            $jx('[id$=zipcode]').rules("add", {
              required: false,
              zipcodeUS: true,
              messages: {
                  zipcodeUS: "<br/>Allowed format: nnnnn or nnnnn-nnnn",
              }
            });
            
            $jx('[id$=ismothercfouryears]').rules("add", {
              required: true,
              messages: {
                  required: "<br/>Required field",
              }
            });
            
            $jx('[id$=isfather4collg]').rules("add", {
              required: true,
              messages: {
                  required: "<br/>Required field",
              }
            })
            
            // additional method to validate US phone no
            jQuery.validator.addMethod("phoneUS", function(phone_number, element) {
              phone_number = phone_number.replace(/\s+/g, "");
              return this.optional(element) || phone_number.length > 9 &&
                  phone_number.match(/\(?[\d\s]{3}\)[\d\s]{3}-[\d\s]{4}$/);
            }, "Please enter a valid format (nnn) nnn-nnnn");
            
            
            // both the variables are to store SSN values
            var finalSSN;
            var encryptedSSN;
            
            $jx(document).ready(function() {
            
              //$jx('[id$="socialSecurityNumber"]').securenumbermask({mask:'*',maxlength:9});
              //$jx('[id$="permanentResidentId"]').securePRI ({mask:'*',maxlength:9});
            
              // For school other field rendering
              $jx(document).on('change', "[id$='Talentschools']", function() {
                  if (this.value == 'None of these') {
                      $jx("[id$='showschool']").show();
                      $jx("[id$='showschool']").css("display", "block");
            
                  } else {
                      $jx("[id$='showschool']").hide();
                      $jx("[id$='showschool']").css("display", "none");
                  }
              });
              
              
              // For permanent resident field rendering
              $jx(document).on('change', "[id$='uscitizen']", function() {
                  if (this.value == 'No') {
                      $jx("[id$='showPR']").show();
                      $jx("[id$='showPR']").css("display", "block");
            
                  } else {
                      $jx("[id$='permanentResidentId']").val("");
                      $jx("[id$='showPR']").hide();
                      $jx("[id$='showPR']").css("display", "none");
                      
                      //On 15 Oct 2018 by Aj******************
                      $jx('[id$="permanentResidentId"]').removeClass("error");
                      $jx("[id$='showPRMsg']").css("display", "none");
                      $jx("[id$='showPRRequired']").css("display", "none");
                      isPRValid=true;
                      //*************************************
                  }
              });
              
            
              // For learned other field rendering
              $jx(document).on('change', "[id$='learnAboutProgram']", function() {
                  if (this.value == 'Other') {
                      $jx("[id$='showprogram']").show();
                  } else {
                      $jx("[id$='showprogram']").hide();
                  }
              });
              // to prevent the tooltip button from clicking
              
              $jx('[id$="Statement_of_Need_tooltiptext"]').click(function(e){
               e.preventDefault();
              });
            
            
              // For email masking
              $jx('[id$="TSParentEmail"]').blur(function() {
                  var email = $j(this).val();
                  var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/igm;
                  if (email.length != 0) {
                      if (re.test(email)) {
                          $jx('.emailmsg').hide();
                      } else {
                          $jx('.emailmsg').hide();
                          $jx('.error').show();
                          $jx('[id$="TSParentEmail"]').addClass("error");
                      }
                  } else if (email.length == 0) {
                      $jx('.emailmsg').hide();
                      $jx('[id$="TSParentEmail"]').removeClass("error");
                  }
              });
              
              
              $jx('[id$="permanentResidentId"]').blur(function() {
                      var pRValue = $jx("[id$='permanentResidentId']").val();
                      if(pRValue == "")
                      {
                          $jx('[id$="permanentResidentId"]').removeClass("error");
                          $jx("[id$='showPRRequired']").css("display", "none");
                      }
                      if(pRValue.length < 9 && pRValue.length != 8 && pRValue.length < 8 && pRValue.length != 0)
                      {
                          $jx('[id$="permanentResidentId"]').addClass("error");
                          $jx("[id$='showPRMsg']").css("display", "block");
                          $jx("[id$='showPRRequired']").css("display", "none");
                      }else if (pRValue.length == 9 && $jx.isNumeric(pRValue)){
                          $jx('[id$="permanentResidentId"]').removeClass("error");
                          $jx("[id$='showPRMsg']").css("display", "none");
                          $jx("[id$='showPRRequired']").css("display", "none");
                          var encryptedPR = pRValue.replace(pRValue ,"*********");
                          $jx('[id$="permanentResidentId"]').val(encryptedPR);
                          $jx('[id$="permanentResidentId-original"]').val(pRValue);
                      }else if (pRValue.length == 8 && $jx.isNumeric(pRValue)){
                          $jx('[id$="permanentResidentId"]').removeClass("error");
                          $jx("[id$='showPRMsg']").css("display", "none");
                          $jx("[id$='showPRRequired']").css("display", "none");
                          var encryptedPR = pRValue.replace(pRValue ,"********");
                          $jx('[id$="permanentResidentId"]').val(encryptedPR);
                          $jx('[id$="permanentResidentId-original"]').val(pRValue);
                      }
                      
                      
                      if(pRValue.length == 0)
                      {
                          $jx('[id$="permanentResidentId"]').removeClass("error");
                          $jx("[id$='showPRRequired']").css("display", "none");
                          $jx("[id$='showPRMsg']").css("display", "none");
                          $jx('[id$="permanentResidentId-original"]').val("");
                      }
                      
                  });
                  

                  $jx('[id$="socialSecurityNumber"]').blur(function() {
                      var pRValue = $jx("[id$='socialSecurityNumber']").val();
                      
                      if(pRValue.length < 11) //On 15 Oct 2018 by Aj, replaced 9 by 11**************************
                      {
                          $jx('[id$="socialSecurityNumber"]').addClass("error");
                          $jx("[id$='showSSNMsg']").css("display", "block");
                      }
                      else
                      {
                          $jx('[id$="socialSecurityNumber"]').removeClass("error");
                          $jx("[id$='showSSNMsg']").css("display", "none");
                          encryptedSSN = finalSSN;

                          var finalStr = encryptedSSN.replace(encryptedSSN ,"***********");
                          $jx('[id$="socialSecurityNumber"]').val(finalStr);
                          $jx('[id$="socialSecurityNumber-original"]').val(finalSSN);
                      }
                      
                      if(pRValue.length == 0)
                      {
                          $jx('[id$="socialSecurityNumber"]').removeClass("error");
                          $jx("[id$='showSSNMsg']").css("display", "none");
                          $jx('[id$="socialSecurityNumber-original"]').val("");
                      }
                  });
            
            
            
              $jx('[id$=ExpectedGraduationYear]').keydown(function(e) {
                  // Allow: backspace, delete, tab, escape, enter and .
                  if ($jx.inArray(e.keyCode, [46, 8, 9, 27, 13, 110]) !== -1 ||
                      // Allow: Ctrl+A, Command+A
                      (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                      // Allow: home, end, left, right, down, up
                      (e.keyCode >= 35 && e.keyCode <= 40)) {
                      // let it happen, don't do anything
                      return;
                  }
                  // Ensure that it is a number and stop the keypress
                  if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                      e.preventDefault();
                  }
              });
            
              $jx('[id$=householdsize]').keydown(function(e) {
                  // Allow: backspace, delete, tab, escape, enter and .
                  if ($jx.inArray(e.keyCode, [46, 8, 9, 27, 13, 110]) !== -1 ||
                      // Allow: Ctrl+A, Command+A
                      (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                      // Allow: home, end, left, right, down, up
                      (e.keyCode >= 35 && e.keyCode <= 40)) {
                      // let it happen, don't do anything
                      return;
                  }
                  // Ensure that it is a number and stop the keypress
                  if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                      e.preventDefault();
                  }
              });
            
              //Disable browser back functionality
              function disableBack() {
                  window.history.forward()
              }
              window.onload = disableBack();
              window.onpageshow = function(evt) {
                  if (evt.persisted)
                      disableBack();
              }
              
            // for selecting multiselect options without pressing ctrl key
               $jx('option').mousedown(function(e) {
                  e.preventDefault();
                  var originalScrollTop = $jx(this).parent().scrollTop();

                  $jx(this).prop('selected', $j(this).prop('selected') ? false : true);
                  var self = this;
                  $jx(this).parent().focus();
                  setTimeout(function() {
                      $jx(self).parent().scrollTop(originalScrollTop);
                  }, 0);
                  
                  return false;
              });  
            });
            
            
            // Prevent the backspace key from navigating back.
            $jx(document).unbind('keydown').bind('keydown', function(event) {
              if (event.keyCode === 8) {
                  var doPrevent = true;
                  var types = ["text", "password", "file", "search", "email", "number", "date", "color", "datetime", "datetime-local", "month", "range", "search", "tel", "time", "url", "week"];
                  var d = $jx(event.srcElement || event.target);
                  var disabled = d.prop("readonly") || d.prop("disabled");
                  if (!disabled) {
                      if (d[0].isContentEditable) {
                          doPrevent = false;
                      } else if (d.is("input")) {
                          var type = d.attr("type");
                          if (type) {
                              type = type.toLowerCase();
                          }
                          if (types.indexOf(type) > -1) {
                              doPrevent = false;
                          }
                      } else if (d.is("textarea")) {
                          doPrevent = false;
                      }
                  }
                  if (doPrevent) {
                      event.preventDefault();
                      return false;
                  }
              }
            });
            
            $jx('[id$=permanentResidentId]').keyup(function(e)
            {
                if(e.keyCode==8)
                {
                    $jx('[id$=permanentResidentId]').val("");
                    $jx('[id$=permanentResidentId-original]').val("");
                }
            });
            
            // For formatting social security number
            $jx('input.ssn').on('keypress', function(event) {
              // trap keypress
              var character = String.fromCharCode(event.which);
              if (!isInteger(character)) {
                  return false;
              }
            });
            
            // checks that an input string is an integer, with an optional +/- sign character
            function isInteger(s) {
              if (s === '-') return true;
              var isInteger_re = /^\s*(\+|-)?\d+\s*$/;
              return String(s).search(isInteger_re) != -1
            }
            
            // format SSN 
              $jx('input.ssn').on('keyup', function() {
                  var val = this.value.replace(/\D/g, '');
                  var newVal = '';
            
                  if (val.length > 4) {
                      this.value = val;
                  }
                  if ((val.length > 3) && (val.length < 6)) {
                      newVal += val.substr(0, 3) + '-';
                      val = val.substr(3);
                  }
                  if (val.length > 5) {
                      newVal += val.substr(0, 3) + '-';
                      newVal += val.substr(3, 2) + '-';
                      val = val.substr(5);
                  }
                  newVal += val;
                  this.value = newVal;
                  finalSSN = this.value;
                  
                  
              });
            
            
            
            // Phone format 
            var zChar = new Array(' ', '(', ')', '-', '.');
            var maxphonelength = 13;
            var phonevalue1;
            var phonevalue2;
            var cursorposition;
            
            function ParseForNumber1(object) {
              phonevalue1 = ParseChar(object.value, zChar);
            }
            
            function ParseForNumber2(object) {
              phonevalue2 = ParseChar(object.value, zChar);
            }
            
            function backspacerUP(object, e) {
              if (e) {
                  e = e
              } else {
                  e = window.event
              }
              if (e.which) {
                  var keycode = e.which
              } else {
                  var keycode = e.keyCode
              }
            
              ParseForNumber1(object)
            
              if (keycode >= 48) {
                  ValidatePhone(object)
              }
            }
            
            function backspacerDOWN(object, e) {
              if (e) {
                  e = e
              } else {
                  e = window.event
              }
              if (e.which) {
                  var keycode = e.which
              } else {
                  var keycode = e.keyCode
              }
              ParseForNumber2(object)
            }
            
            function GetCursorPosition() {
            
              var t1 = phonevalue1;
              var t2 = phonevalue2;
              var bool = false
              for (i = 0; i < t1.length; i++) {
                  if (t1.substring(i, 1) != t2.substring(i, 1)) {
                      if (!bool) {
                          cursorposition = i
                          bool = true
                      }
                  }
              }
            }
            
            function ValidatePhone(object) {
            
              var p = phonevalue1
            
              p = p.replace(/[^\d]*/gi, "")
            
              if (p.length < 3) {
                  object.value = p
              } else if (p.length == 3) {
                  pp = p;
                  d4 = p.indexOf('(')
                  d5 = p.indexOf(')')
                  if (d4 == -1) {
                      pp = "(" + pp;
                  }
                  if (d5 == -1) {
                      pp = pp + ")";
                  }
                  object.value = pp;
              } else if (p.length > 3 && p.length < 7) {
                  p = "(" + p;
                  l30 = p.length;
                  p30 = p.substring(0, 4);
                  p30 = p30 + ")"
            
                  p31 = p.substring(4, l30);
                  pp = p30 + p31;
            
                  object.value = pp;
            
              } else if (p.length >= 7) {
                  p = "(" + p;
                  l30 = p.length;
                  p30 = p.substring(0, 4);
                  p30 = p30 + ")"
            
                  p31 = p.substring(4, l30);
                  pp = p30 + p31;
            
                  l40 = pp.length;
                  p40 = pp.substring(0, 8);
                  p40 = p40 + "-"
            
                  p41 = pp.substring(8, l40);
                  ppp = p40 + p41;
            
                  object.value = ppp.substring(0, maxphonelength);
              }
            
              GetCursorPosition()
            
              if (cursorposition >= 0) {
                  if (cursorposition == 0) {
                      cursorposition = 2
                  } else if (cursorposition <= 2) {
                      cursorposition = cursorposition + 1
                  } else if (cursorposition <= 5) {
                      cursorposition = cursorposition + 2
                  } else if (cursorposition == 6) {
                      cursorposition = cursorposition + 2
                  } else if (cursorposition == 7) {
                      cursorposition = cursorposition + 4
                      e1 = object.value.indexOf(')')
                      e2 = object.value.indexOf('-')
                      if (e1 > -1 && e2 > -1) {
                          if (e2 - e1 == 4) {
                              cursorposition = cursorposition - 1
                          }
                      }
                  } else if (cursorposition < 11) {
                      cursorposition = cursorposition + 3
                  } else if (cursorposition == 11) {
                      cursorposition = cursorposition + 1
                  } else if (cursorposition >= 12) {
                      cursorposition = cursorposition
                  }
            
                  var txtRange = object.createTextRange();
                  txtRange.moveStart("character", cursorposition);
                  txtRange.moveEnd("character", cursorposition - object.value.length);
                  txtRange.select();
              }
            
            }
            
            function ParseChar(sStr, sChar) {
              if (sChar.length == null) {
                  zChar = new Array(sChar);
              } else zChar = sChar;
            
              for (i = 0; i < zChar.length; i++) {
                  sNewStr = "";
            
                  var iStart = 0;
                  var iEnd = sStr.indexOf(sChar[i]);
            
                  while (iEnd != -1) {
                      sNewStr += sStr.substring(iStart, iEnd);
                      iStart = iEnd + 1;
                      iEnd = sStr.indexOf(sChar[i], iStart);
                  }
                  sNewStr += sStr.substring(sStr.lastIndexOf(sChar[i]) + 1, sStr.length);
            
                  sStr = sNewStr;
              }
            
              return sNewStr;
            }
            
            // function for checking invalid email field while form submission
            $jx('[id$=tSIntakeForm]').submit(function() {
            
              var email = $jx("[id$='TSParentEmail']").val();
              var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/igm;
              if (re.test(email) || email.length == 0) {
              }
              else if (!re.test(email) && email.length != 0){
                  $jx('[id$="TSParentEmail"]').addClass("error");
                  event.preventDefault();
              }
              
             /* var pRValue = $jx("[id$='permanentResidentId']").val();
              if(pRValue == "")
              {
                  $jx('[id$="permanentResidentId"]').addClass("error");
                  $jx("[id$='showPRRequired']").css("display", "block");
                  event.preventDefault();
              }
              if(pRValue.length == 0)
              {
                  event.preventDefault();
                  $jx('[id$="permanentResidentId"]').addClass("error");
                  $jx("[id$='showPRRequired']").css("display", "block");
              }
              if(pRValue.length < 9 && pRValue.length != 8 && pRValue.length < 8 && pRValue.length > 0)
              {
                  event.preventDefault();
                  $jx('[id$="permanentResidentId"]').addClass("error");
                  $jx("[id$='showPRMsg']").css("display", "block");
              } */
              
            });
        </script>
        <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"/>
        <apex:includeScript value="{!$Resource.bootstrap_session_timeout}"/>
        <apex:includeScript value="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"/>
</apex:component>